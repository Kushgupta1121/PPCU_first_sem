%This is a function
function [ecg_in] = pantom(ecg, Fs)
    % Pan-Tompkins algorithm
    % Low-pass Filter

    B_lp_1 = [1 zeros(1,5) -2 zeros(1,5) 1]/32;
    A_lp_1 = [1 -2 1]*32;
    %ecg_lp = filter(B_lp_1,A_lp_1,ecg);
    %ecg_lp = ecg_lp/max(ecg_lp);

    hd1=dfilt.df2(B_lp_1,A_lp_1);
    ecg_out1=filter(hd1,ecg);
    ecg_out1=ecg_out1-mean(ecg_out1);
    ecg_out1=ecg_out1/max(abs(ecg_out1));

    %Highpass filter
    B_hp_2 = -[1 zeros(1,15) -32 zeros(1,15) -1];
    A_hp_2 = [1 -1]*32 ; 
    %ecg_hp = filter(B_hp_1,A_hp_1,ecg_lp);
    %ecg_hp = ecg_hp/max(ecg_hp);
        hd2=dfilt.f2(B_hp_2,A_hp_2);
        ecg_out2=filter(hd2,ecg_out1);
        ecg_out2=[ecg_out2(1:40)*0.25;ecg_out2(41:end)];
        ecg_out2=ecg_out2/max(abs(ecg_out2));




    %Derivative filter
    B_df_1 = [2 1 0 -1 -2];%[1 2 0 -2 -1]*Fs/8;
    A_df_1 = [1 ]*8;
    %ecg_df = filter(B_df_1,A_df_1,ecg_hp);
    %ecg_df  = ecg_df/max(ecg_df);
    hd3=dfilt.f2(B_df_1,A_df_1);
    ecg_out3=filter(hd3,ecg_out2);
    ecg_out3=ecg_out3/max(abs(ecg_out3));

    %Squaring
    %ecg_sq = ecg_df .^2;
    ecg_out4=ecg_out3.^2;
    ecg_out4=ecg_out4/max(abs(ecg_out4));

    %Integrating (reference eqn 3.119 from book)
   % B_in_1 = [1 zeros(1,7) -1]/8;
    %A_in_1 = [1 -1];
    %ecg_in = filter(B_in_1,A_in_1,ecg_sq);
    % Moving window average
    ecg_out4pad=[zeros(1,29) ecg_out4' zeros(1,29)];
    for i=30:length(ecg_out4pad)-29
        ecg5(i-29)=sum(ecg_out4pad(i-29:i))/30;

end